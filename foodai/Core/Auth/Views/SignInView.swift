//======================================================================
// MARK: - SignInView.swift (Redesigned)
// Path: foodai/Core/Auth/Views/SignInView.swift
//======================================================================
import SwiftUI

struct SignInView: View {
    @State private var email = ""
    @State private var password = ""
    @State private var showSignUp = false
    @State private var showForgotPassword = false
    @State private var showError = false
    @State private var errorMessage = ""
    
    @EnvironmentObject var authManager: AuthManager
    
    init() {
        print("üîµ SignInView: Initialized")
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 30) {
                    Spacer()
                    
                    // App Logo & Title
                    VStack(spacing: 16) {
                        Image(systemName: "fork.knife.circle.fill")
                            .font(.system(size: 80))
                            .foregroundColor(AppEnvironment.Colors.accentGreen)
                        
                        Text("couleur")
                            .font(.largeTitle)
                            .fontWeight(.bold)
                            .foregroundColor(.black)
                        
                        Text("Ëâ≤„Å®„Çä„Å©„Çä„ÅÆÁû¨Èñì„Çí„Ç∑„Çß„Ç¢„Åó„Çà„ÅÜ")
                            .font(.subheadline)
                            .foregroundColor(.gray)
                    }
                    
                    // Authentication Options
                    VStack(spacing: 20) {
                        // Google Sign-In Button (Ê∫ñÂÇô‰∏≠)
                        Button(action: {
                            Task {
                                await signInWithGoogle()
                            }
                        }) {
                            HStack {
                                Image(systemName: "globe")
                                    .font(.system(size: 18))
                                Text("Google„Åß„É≠„Ç∞„Ç§„É≥")
                                    .fontWeight(.medium)
                            }
                            .frame(maxWidth: .infinity)
                            .frame(height: 50)
                            .background(Color.black)
                            .foregroundColor(.white)
                            .cornerRadius(0)
                        }
                        .disabled(authManager.isLoading)
                        
                        // Divider
                        HStack {
                            Rectangle()
                                .frame(height: 1)
                                .foregroundColor(.gray.opacity(0.3))
                            Text("„Åæ„Åü„ÅØ")
                                .font(.caption)
                                .foregroundColor(.gray)
                                .padding(.horizontal, 16)
                            Rectangle()
                                .frame(height: 1)
                                .foregroundColor(.gray.opacity(0.3))
                        }
                        
                        // Email Sign-In Form
                        VStack(spacing: 16) {
                            TextField("„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ", text: $email)
                                .textFieldStyle(SquareTextFieldStyle())
                                .autocapitalization(.none)
                                .keyboardType(.emailAddress)
                                .disabled(authManager.isLoading)
                            
                            SecureField("„Éë„Çπ„ÉØ„Éº„Éâ", text: $password)
                                .textFieldStyle(SquareTextFieldStyle())
                                .textContentType(.none)
                                .autocorrectionDisabled()
                                .disabled(authManager.isLoading)
                            
                            // Forgot Password
                            HStack {
                                Spacer()
                                Button("„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂøò„Çå„ÅüÂ†¥Âêà") {
                                    showForgotPassword = true
                                }
                                .font(.caption)
                                .foregroundColor(.black)
                            }
                        }
                        
                        // Sign In Button
                        Button(action: {
                            print("üîµ SignIn button tapped")
                            print("üîµ Current email: \(email)")
                            print("üîµ Current password length: \(password.count)")
                            Task {
                                await signInWithEmail()
                            }
                        }) {
                            Group {
                                if authManager.isLoading {
                                    ProgressView()
                                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                                } else {
                                    Text("„É≠„Ç∞„Ç§„É≥")
                                        .fontWeight(.semibold)
                                }
                            }
                            .frame(maxWidth: .infinity)
                            .frame(height: 50)
                            .background(Color.black)
                            .foregroundColor(.white)
                            .cornerRadius(0)
                        }
                        .disabled(email.isEmpty || password.isEmpty || authManager.isLoading)
                    }
                    .padding(.horizontal, 20)
                    
                    Spacer()
                    
                    // Sign Up Link
                    VStack(spacing: 16) {
                        HStack {
                            Text("„Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„Åß„Å™„ÅÑÂ†¥Âêà")
                                .font(.body)
                                .foregroundColor(.gray)
                            
                            Button("Êñ∞Ë¶èÁôªÈå≤") {
                                showSignUp = true
                            }
                            .font(.body)
                            .fontWeight(.semibold)
                            .foregroundColor(.black)
                        }
                        
                        // Quick Test Accounts
                        VStack(spacing: 8) {
                            Text("„ÉÜ„Çπ„ÉàÁî®„Ç¢„Ç´„Ç¶„É≥„Éà")
                                .font(.caption)
                                .foregroundColor(.gray)
                            
                            HStack(spacing: 12) {
                                Button("TestUser1") {
                                    print("üîµ TestUser1 button tapped")
                                    email = "test1@couleur.com"
                                    password = "test123"
                                    print("üîµ Email set to: \(email), Password set")
                                }
                                .buttonStyle(TestButtonStyle())
                                
                                Button("TestUser2") {
                                    print("üîµ TestUser2 button tapped")
                                    email = "test2@couleur.com"
                                    password = "test123"
                                    print("üîµ Email set to: \(email), Password set")
                                }
                                .buttonStyle(TestButtonStyle())
                            }
                        }
                    }
                    
                    Spacer()
                }
                .padding()
            }
            .navigationBarHidden(true)
            .background(AppEnvironment.Colors.background)
            .alert("„Ç®„É©„Éº", isPresented: $showError) {
                Button("OK") { }
                    .foregroundColor(AppEnvironment.Colors.accentRed)
            } message: {
                Text(errorMessage)
            }
            .sheet(isPresented: $showSignUp) {
                SignUpView()
                    .environmentObject(authManager)
            }
            .sheet(isPresented: $showForgotPassword) {
                ForgotPasswordView()
                    .environmentObject(authManager)
            }
        }
    }
    
    // MARK: - Authentication Methods
    
    private func signInWithEmail() async {
        print("üîµ SignInView: Starting email sign in")
        print("üîµ Email: \(email)")
        print("üîµ Password length: \(password.count)")
        
        do {
            try await authManager.signInWithEmail(email: email, password: password)
            print("‚úÖ SignInView: Sign in completed successfully")
        } catch {
            print("‚ùå SignInView: Sign in failed with error: \(error)")
            await MainActor.run {
                errorMessage = handleAuthError(error)
                showError = true
                print("üîµ SignInView: Error message set to: \(errorMessage)")
            }
        }
    }
    
    private func signInWithGoogle() async {
        print("üîµ SignInView: Starting Google sign in")
        do {
            try await authManager.signInWithGoogle()
            print("‚úÖ SignInView: Google sign in completed successfully")
        } catch {
            print("‚ùå SignInView: Google sign in failed with error: \(error)")
            await MainActor.run {
                errorMessage = handleAuthError(error)
                showError = true
                print("üîµ SignInView: Google error message set to: \(errorMessage)")
            }
        }
    }
    
    private func handleAuthError(_ error: Error) -> String {
        let errorDescription = error.localizedDescription.lowercased()
        
        if errorDescription.contains("invalid login credentials") {
            return "„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì"
        } else if errorDescription.contains("email not confirmed") {
            return "„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÁ¢∫Ë™ç„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì"
        } else if errorDescription.contains("too many requests") {
            return "„É≠„Ç∞„Ç§„É≥Ë©¶Ë°åÂõûÊï∞„ÅåÂ§ö„Åô„Åé„Åæ„Åô„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        } else if errorDescription.contains("network") {
            return "„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        } else {
            return "„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: \(error.localizedDescription)"
        }
    }
}

// MARK: - Custom Styles

struct CustomTextFieldStyle: TextFieldStyle {
    func _body(configuration: TextField<Self._Label>) -> some View {
        configuration
            .padding(.horizontal, 16)
            .padding(.vertical, 12)
            .background(Color(.systemGray6))
            .cornerRadius(8)
    }
}

struct TestButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .font(.caption)
            .padding(.horizontal, 12)
            .padding(.vertical, 6)
            .background(AppEnvironment.Colors.accentRed.opacity(0.1))
            .foregroundColor(AppEnvironment.Colors.accentRed)
            .cornerRadius(6)
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)
    }
}

struct SquareTextFieldStyle: TextFieldStyle {
    func _body(configuration: TextField<Self._Label>) -> some View {
        configuration
            .padding(.horizontal, 16)
            .padding(.vertical, 12)
            .background(Color(.systemGray6))
            .cornerRadius(0)
            .overlay(
                Rectangle()
                    .stroke(Color.gray.opacity(0.3), lineWidth: 1)
            )
    }
}